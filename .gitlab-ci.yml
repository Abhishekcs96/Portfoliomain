stages:
  - build
  - packaging
  - testing
  - deploy

variables:
  APP_VERSION: $CI_PIPELINE_IID

Build Website:
  stage: build
  image: node:16-alpine
  script:
    - npm ci
    - npm run lint
    - npm test
    - npm run build
    - echo $APP_VERSION > build/version.html
  artifacts:
    paths:
      - build

Building Docker Image:
  stage: packaging
  image: docker:20.10.13
  services: 
    - docker:20.10.13-dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE:$APP_VERSION .       
    - docker image ls
    - docker push --all-tags $CI_REGISTRY_IMAGE 

Testing Docker Image:
  stage: testing
  image: curlimages/curl
  services:
    - name: $CI_REGISTRY_IMAGE:$APP_VERSION
      alias: versioncheck
  script:
    - curl -v http://versioncheck/version.html | grep $APP_VERSION

Deploy to EC2:
  stage: deploy
  image: alpine
  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - 
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script: 
    - ssh -o StrictHostKeyChecking=no ec2-user@ec2-3-104-202-211.ap-southeast-2.compute.amazonaws.com "docker images; docker system prune -a; y; docker pull registry.gitlab.com/abhishekcs96/portfoliomain:latest; docker run --rm --name Happy_Visvesvaraya -d -p 443:80 registry.gitlab.com/abhishekcs96/portfoliomain:latest; echo "Alles ist gut"; exit"


